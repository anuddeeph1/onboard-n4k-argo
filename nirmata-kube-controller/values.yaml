# # Default values for nirmata-kube-controller.
# # This is a YAML-formatted file.
# # Declare variables to be passed into your templates.

# Specifies the WebSocket URL for connecting to the Nirmata service.
nirmataURL: "wss://nirmata.io/tunnels"

# Defines the Kubernetes namespace where the Nirmata components will be deployed.
namespace: "nirmata"

#  Contains global configuration settings that is applied across different components.
global:
  # The container registry from which images will be pulled.
  # Replace with your desired container registry.
  imageRegistry: 844333597536.dkr.ecr.us-west-1.amazonaws.com
  # The repository from which images will be pulled.
  # Replace with your desired container repository.
  imageRepository: nirmata
  
  # ImagePullSecret Configuration
  # Set to true to create the imagePullSecret, false to use an existing secret
  createSecret: true
  # Name of the imagePullSecret to use (created or existing)
  imagePullSecretName: ecr-nirmata-controller-registry-secret
  
  # Credentials for the private container registry (required only if createSecret: true).
  registryUserName: AWS
  registryPassword: eyJwYXlsb2FkIjoiTCsyWE04aVVUeDI2cVhseTVYbnRzR1V3bTVURFE4aE1kSTNmb1I1RFowOHozZHpvZ3RHRmxzVGV3c0cxNTZPMTRaZkhJYXFuN3ZhOThQVUlWN2c3NUEyQVUzOWhZSkRtVS9vRDlQc0ZVeU9LZzZKWE1mS3B5YTd6NVE4TmxvVURPSDI3VDVvWElNSkk3ZW9HdHR2cEZLTXhiV1o1dzdPSVlGVnZrWTh0S0tmbjNoMjFFOThIdVhjclFnU1hvWkFVU3UwS09ja1ZySnk2cEhHTmZwZys0bnRQeHN3M3BzMG9ueVlteUkxcEVXZXowbzk4bVFaMTkwdmhpY1dPalJ1bitlTkpCOWxpZEg3eklsYUdZQVJyOHJHRHFKeHE0R2JNYjR6KzRuNTlWcnMyOFBYMmxPa2IrRDJRQ0xRb2FZSGNYREU3M0ZZR0NLZkhsVzdPMDlNWlZldEhFa012VUdzRUhSWFJmSmtRcnM4VzhHUWVkWmlEdWJmMXZIMHR1KytaMHNlMEJvMHdLc2hxSUlCLzNrMVNEV3FRL25BTmhaeG5VZVNjaDF3MkJGc2ExbWJlbXJwelFheVFIRTRZRkZkVjFxRDZFVGs2SVRReklGV3NnWVJiWExNMWtFak9ETFZKQ1JuY2gyZ0RubnBVZktkMzZQcUhCWHBibmdtYUVmTndnZWJFcWNLLzdZNXUrbEovanlxeW1IYnd1ajNHNk9TT3M1Q0hFNnZKc3dBT2lWbjBnZlNJWW9CeHhxMzI5Z0R1U0ZwcmRlUWhYYUJxckNzSExoVDlVT21iYzNHYmR5dFJrQWVPSy9ZZzJ5ZzZlQ2VXWjBvTzduMWphbHhHU3R0K3JEajljM0hJWVVZbThtMm5NbVY1MEprakRHUE5WV2EvRVVTOUE4eTAranI2VHdpQkg5bnNXd0dvUXdPaXFCa2xUcG1uK2xaOUFWYTB2Y0luZmViSDdiVWpKZnpnOVhBcGEyTHZuV3phdUdTMmNCcTN3UVRvZWRUOHlUaStVbkVBdS9iY2E1cC82SUVMenZYdUFGc0ErNGVZcjNVcmVXZFE0UlR1UFJmVUFPVy9xQUV2ZzFOSnkyaFoyMStycHVsY0ZGeWprd3kxU1VFR01CRjhVUzdOb2c4MU1Lbm1nR0pHejB3NW5XOG9UYlRuUk9ST2JCTmJGd3B2czFmT24rait2NHJ1RU1mc0YzazUrdE56VzNPNE9hbGFvT0Z2QnRROGNDVThnZGJRcW8wYjJRVHR6UE9UZlZXWkJzV0Jkekc3Z3E5OExGY1puS2d0TGs1dEZEeVN5VTFzb0pHSjdFU2tKQ2tVUysyQnpWVUg5Ny9tRGlSbDFiSENoZkY2IiwiZGF0YWtleSI6IkFRRUJBSGlqRUZYR3dGMWNpcFZPYWNHOHFSbUpvVkJQYXk4TFVVdlU4UkNWVjBYb0h3QUFBSDR3ZkFZSktvWklodmNOQVFjR29HOHdiUUlCQURCb0Jna3Foa2lHOXcwQkJ3RXdIZ1lKWUlaSUFXVURCQUV1TUJFRURIeTduNzBhQzlMQmtYeFR4QUlCRUlBN3VYaUFacWZwUHlHclJyblBIMDI2bC9YQkFDTnJZK3kwb0hmS2ZCYkpvUkZOemFtR0w4VmtKVWphZlVoTUM4NmhxWjFFcUoveWNhQWZLZlE9IiwidmVyc2lvbiI6IjIiLCJ0eXBlIjoiREFUQV9LRVkiLCJleHBpcmF0aW9uIjoxNzQ4MDQyNTUwfQ==
  
  # Usage Examples:
  # 1. Create secret with AWS ECR credentials:
  #    createSecret: true
  #    registryUserName: AWS  
  #    registryPassword: <raw-ecr-token>  # NOT base64 encoded!
  #    imagePullSecretName: my-ecr-secret
  #
  # 2. Use existing secret:
  #    createSecret: false
  #    imagePullSecretName: my-existing-secret
  #    (registryUserName and registryPassword not needed)

# otelAgent contains configuration for the nirmata otel agent, which is used for observability and monitoring.
otelAgent:
  # imageTag is the tag or version of the otel-agent image.
  imageTag: "0.92.0"
  resources:
    requests:
      cpu: 100m
      memory: 200Mi
    limits:
      cpu: 500m
      memory: 1024Mi

# kubeController contains configuration for the nirmata-kube-controller.
kubeController:
  # imageTag is the tag or version of the nirmata-kube-controller image. If added, it will override the  .Chart.AppVersion
  imageTag: ""
  # customCACert contains the custom CA certificate data in base64 encoded format
  customCACert: ""
  # customCaConfigMap specifies an existing ConfigMap containing CA certificate. If provided, this will be used instead of creating a new ConfigMap from customCACert
  customCaConfigMap: ""
  # insecure enables insecure communication with the Nirmata service (skips TLS verification)
  insecure: false
  resources:
    requests:
      cpu: 250m
      memory: 200Mi
    limits:
      cpu: 500m
      memory: 2Gi

# cluster contains configuration related to the Kubernetes cluster which is being onboarded to NCH.
cluster:
  # name used for cluster by nch (Default: kubesystem namespace ID)
  name: "onboarding-using-argo"
  # type of the cluster categorised by nch. (Default value is "default-policy-manager-type")
  type: default-policy-manager-type
  # labels is a set of key-value pairs that can be used to label the cluster while onboarding the cluster to Nirmata Control Hub.
  # These labels are passed as command-line arguments to the Nirmata Kubernetes controller in the deployment.
  # Example:
  # labels:
  #   key1: value1
  #   key2: value2
  #
  # When set, the labels are reflected in the Helm template as follows:
  # In the `deployment.yaml`:
  #       - "-cluster-labels"
  #       - "key1:value1"
  #       - "-cluster-labels"
  #       - "key2:value2"
  labels: {}

# api token is just for registering the cluster to Nirmata Control Hub.
# This token is required for the nirmata-kube-controller to communicate with the Nirmata Control Hub. (Required)
apiToken: "rc9YiREZ5gphOlYH7D8E41hun08y7N5xOpBr9ZGv0vhIecri14GqCptT+nm+nHiUYQG5FBGoSxYehLadJ2Tu1Q=="

# apiTokenSecret is the name of the secret containing the API token.
apiTokenSecret: "nirmata-api-token"

# features enables or disables specific features while installing kube-controller.
# features:
#   policyExceptions:
#     enabled: true
#   policySets:
#     enabled: true

# readWriteMode determines whether the nirmata-kube-controller operates in read-write mode or read-only mode.
# When set to `true`, the controller can make changes to the CR. When `false`, it operates in a read-only manner.
readWriteMode: true

# proxy contains configuration for proxy settings if the KubeController needs to communicate through a proxy.
proxy:
 # httpProxy is the HTTP proxy URL.
  httpProxy: ""
 # httpsProxy is the HTTPS proxy URL.
  httpsProxy: ""
 # noProxy is a comma-separated list of domains or IP addresses that should bypass the proxy.
  noProxy: ""
